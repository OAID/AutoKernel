import logging
import torch
from torch import nn
import numpy as np

class Register:
    def __init__(self, registry_name):
        self._dict = {}
        self._name = registry_name

    def __setitem__(self, key, value):
        if not callable(value):
            raise Exception("Value of a Registry must be a callable")
        if key is None:
            key = value.__name__
        if key in self._dict:
            logging.warning("Key %s already in registry %s." % (key, self._name))
        self._dict[key] = value

    def register(self, key_name):
        """Decorator to register a function or class."""
        def add(key, value):
            self[key] = value
            return value
        # @reg.register('alias')
        return lambda func: add(key_name, func)

    def __getitem__(self, key):
        return self._dict[key]

    def __contains__(self, key):
        return key in self._dict

    def keys(self):
        """key"""
        return self._dict.keys()

op_reg = Register("op_register")
